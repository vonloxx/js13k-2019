/**
 * Each character is 5x5 bits (=25) Ex 'B' character:
 * 66: 0b
 *    1 1 1 1 0
 *    1 0 0 1 0
 *    1 1 1 1 1
 *    1 0 0 0 1
 *    1 1 1 1 1,
 */
const font = {
  46: 0b0000000000000000000000100,
  45: 0b0000000000111110000000000,
  49: 0b0110000100001000010011111,
  50: 0b1111000001011101000011111,
  51: 0b1111000001011110000111110,
  52: 0b1001010010111110001000010,
  53: 0b1111110000111100000111110,
  54: 0b0111010000111101000101110,
  55: 0b1111100001000100010000100,
  56: 0b0111010001011101000101110,
  57: 0b0111010001011110000101110,
  48: 0b0111010001100011000101110,
  65: 0b1111110001111111000110001,
  66: 0b1111010010111111000111111,
  67: 0b1111110000100001000011111,
  68: 0b1110010010100011000111111,
  69: 0b1111110000111001000011111,
  70: 0b1111110000111001000010000,
  71: 0b1111110000101111000111111,
  72: 0b1000110001111111000110001,
  73: 0b1111100100001000010011111,
  74: 0b0000100001000011000111111,
  75: 0b1001010100111001001010001,
  76: 0b1000010000100001000011111,
  77: 0b1000111011101011000110001,
  78: 0b1000111001101011001110001,
  79: 0b1111110001100011000111111,
  80: 0b1111110001111111000010000,
  81: 0b1111010010100101001011111,
  82: 0b1111110001111111001010001,
  83: 0b1111110000111110000111111,
  84: 0b1111100100001000010000100,
  85: 0b1000110001100011000111111,
  86: 0b1000110001100010101000100,
  87: 0b1000110001101011101110001,
  88: 0b1000101010001000101010001,
  89: 0b1000110001111110010000100,
  90: 0b1111100010001000100011111,
  32: 0b0000000000000000000000000,
  44: 0b0000000000000000010000100,
  43: 0b0000000100011100010000000,
  47: 0b0000100010001000100010000,
  58: 0b0000000100000000010000000,
  64: 0b1111100001111011010111111,
  35: 0b0000001010000000101000000,
  37: 0b0111010001101011000101110,
};

export default {
  fillText(context, x, y, text, scale = 1.0) {
    text = text.toUpperCase();

    [...text].map((chr, i) => {
      if (font[text.charCodeAt(i)]) {
        for (let j = 0; j < 25; j++) {
          const ly = ~~(j / 5);

          if ((font[text.charCodeAt(i)] >> j) & 1 === 1) {
            context.fillRect(x + (5 * scale) + (((i * 6) - (j - ly * 5)) * scale), y + (5 * scale) - ly * scale, scale, scale);
          }
        }
      }
    });
  },
}